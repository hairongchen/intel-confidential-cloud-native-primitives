// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/quote-server.proto

package quoteServer

import (
        context "context"
        grpc "google.golang.org/grpc"
        codes "google.golang.org/grpc/codes"
        status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetQuoteClient is the client API for GetQuote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetQuoteClient interface {
        GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
}

type getQuoteClient struct {
        cc grpc.ClientConnInterface
}

func NewGetQuoteClient(cc grpc.ClientConnInterface) GetQuoteClient {
        return &getQuoteClient{cc}
}

func (c *getQuoteClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
        out := new(GetQuoteResponse)
        err := c.cc.Invoke(ctx, "/quoteserver.GetQuote/GetQuote", in, out, opts...)
        if err != nil {
                return nil, err
        }
        return out, nil
}

// GetQuoteServer is the server API for GetQuote service.
// All implementations must embed UnimplementedGetQuoteServer
// for forward compatibility
type GetQuoteServer interface {
        GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
        mustEmbedUnimplementedGetQuoteServer()
}

// UnimplementedGetQuoteServer must be embedded to have forward compatible implementations.
type UnimplementedGetQuoteServer struct {
}

func (UnimplementedGetQuoteServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
        return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedGetQuoteServer) mustEmbedUnimplementedGetQuoteServer() {}

// UnsafeGetQuoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetQuoteServer will
// result in compilation errors.
type UnsafeGetQuoteServer interface {
        mustEmbedUnimplementedGetQuoteServer()
}

func RegisterGetQuoteServer(s grpc.ServiceRegistrar, srv GetQuoteServer) {
        s.RegisterService(&GetQuote_ServiceDesc, srv)
}

func _GetQuote_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
        in := new(GetQuoteRequest)
        if err := dec(in); err != nil {
                return nil, err
        }
        if interceptor == nil {
                return srv.(GetQuoteServer).GetQuote(ctx, in)
        }
        info := &grpc.UnaryServerInfo{
                Server:     srv,
                FullMethod: "/quoteserver.GetQuote/GetQuote",
        }
        handler := func(ctx context.Context, req interface{}) (interface{}, error) {
                return srv.(GetQuoteServer).GetQuote(ctx, req.(*GetQuoteRequest))
        }
        return interceptor(ctx, in, info, handler)
}

// GetQuote_ServiceDesc is the grpc.ServiceDesc for GetQuote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetQuote_ServiceDesc = grpc.ServiceDesc{
        ServiceName: "quoteserver.GetQuote",
        HandlerType: (*GetQuoteServer)(nil),
        Methods: []grpc.MethodDesc{
                {
                        MethodName: "GetQuote",
                        Handler:    _GetQuote_GetQuote_Handler,
                },
        },
        Streams:  []grpc.StreamDesc{},
        Metadata: "proto/quote-server.proto",
}
